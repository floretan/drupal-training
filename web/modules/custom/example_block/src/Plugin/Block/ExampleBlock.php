<?php

namespace Drupal\example_block\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Theme\ThemeManagerInterface;
use Drupal\user\Entity\User;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Session\AccountProxy;

/**
 * Provides a 'ExampleBlock' block.
 *
 * @Block(
 *  id = "example_block",
 *  admin_label = @Translation("Example block"),
 * )
 */
class ExampleBlock extends BlockBase implements ContainerFactoryPluginInterface {

  /**
   * Drupal\Core\Session\AccountProxy definition.
   *
   * @var \Drupal\Core\Session\AccountProxy
   */
  protected $currentUser;

  /**
   * @var \Drupal\Core\Theme\ThemeManagerInterface
   */
  protected $themeManager;

  /**
   * Construct.
   *
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin_id for the plugin instance.
   * @param string $plugin_definition
   *   The plugin implementation definition.
   */
  public function __construct(
        array $configuration,
        $plugin_id,
        $plugin_definition,
        AccountProxy $current_user,
        ThemeManagerInterface $themeManager
  ) {

    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->currentUser = $current_user;
    $this->themeManager = $themeManager;
  }
  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('current_user'),
      $container->get('theme.manager')
    );
  }
  
  public function blockForm($form, FormStateInterface $form_state) {
    $form =  parent::blockForm($form, $form_state); // TODO: Change the autogenerated stub

    $config = $this->getConfiguration();

    $form['foo'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Foo'),
      '#default_value' => $config['foo'],
    ];

    return $form;
  }

  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    parent::submitConfigurationForm($form, $form_state);

    $foo = $form_state->getValue('foo');

    $this->setConfiguration([
      'foo' => $foo
    ]);
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    $build = [];

    $config = $this->getConfiguration();

    $build['example_block']['#markup'] =
      $this->t('Hello @user, you are using @theme. Custom config is @foo. Time is @time', [
        '@user' => $this->currentUser->getDisplayName(),
        '@theme' => $this->themeManager->getActiveTheme()->getName(),
        '@foo' => $config['foo'],
        '@time' => time(),
      ]);
    
    if ($this->currentUser->hasPermission('edit all organisations')) {
      
    }

    $build['#cache']['max-age'] = 0;
//    $build['#cache']['tags'] = [User::load($this->currentUser->id())->getCacheTags()];
//debug(User::load($this->currentUser->id())->getCacheTags());
    return $build;
  }

  public function getCacheMaxAge() {
    return 300;
  }

  public function getCacheContexts() {
    return ['user.roles'];
  }

}
